{"version":3,"sources":["itemAdder.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ItemAdder","state","listItem","dueDate","handleUpdate","event","target","name","value","setState","onSubmit","preventDefault","props","addListItem","htmlFor","className","id","type","onChange","this","React","Component","App","list","previousState","done","removeListItem","selectedItem","innerText","console","log","map","item","copyItem","clearList","onClick","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAmDeA,E,4MAhDbC,MAAQ,CACNC,SAAU,GACVC,QAAS,I,EAGXC,aAAe,SAACC,GACd,IAAMH,EAAWG,EAAMC,OAAOC,KACxBC,EAAQH,EAAMC,OAAOE,MAC3B,EAAKC,UAAS,WACZ,OAAO,eACJP,EAAWM,O,uDAKR,IAAD,OACP,OACE,0BACEE,SAAU,SAACL,GACTA,EAAMM,iBACN,EAAKC,MAAMC,YAAY,EAAKZ,MAAMC,SAAU,EAAKD,MAAME,SACvD,EAAKM,SAAS,CAAEP,SAAU,GAAIC,QAAS,OAGzC,2BAAOW,QAAQ,aAAf,aACA,2BACEC,UAAU,aACVR,KAAK,WACLS,GAAG,YACHC,KAAK,OACLC,SAAUC,KAAKf,aACfI,MAAOW,KAAKlB,MAAMC,WAEpB,2BAAOY,QAAQ,YAAf,aACA,2BACEC,UAAU,aACVR,KAAK,UACLS,GAAG,WACHC,KAAK,OACLC,SAAUC,KAAKf,eAGjB,4BAAQW,UAAU,OAAlB,+B,GA3CgBK,IAAMC,WC6FfC,E,4MAzFbrB,MAAQ,CACNsB,KAAM,I,EAGRV,YAAc,SAACX,EAAUC,GACvB,EAAKM,UAAS,SAACe,GACb,MAAO,CACLD,KAAK,GAAD,mBACCC,EAAcD,MADf,CAEF,CAAEhB,KAAML,EAAUuB,MAAM,EAAOtB,QAASA,U,EAMhDuB,eAAiB,SAACrB,GAChB,IAAMsB,EAAetB,EAAMC,OAAOsB,UAClCC,QAAQC,IAAIH,GACZ,EAAKlB,UAAS,SAACe,GACb,MAAO,CACLD,KAAMC,EAAcD,KAAKQ,KAAI,SAACC,GAC5B,GAAIA,EAAKzB,OAASoB,EAAc,CAC9B,IAAMM,EAAQ,eAAQD,GAEtB,OADAC,EAASR,MAAQQ,EAASR,KACnBQ,EAEP,OAAOD,U,EAMjBE,UAAY,WACV,EAAKzB,SAAS,CAAEc,KAAM,M,uDAGd,IAAD,OACP,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEF,4BAAQoB,QAAShB,KAAKe,WAAtB,cACA,+BACE,+BACE,4BACE,oCACA,0CAIHf,KAAKlB,MAAMsB,KAAKQ,KAAI,SAACC,GACpB,OAAkB,IAAdA,EAAKP,KAEL,wBAAIW,IAAKJ,EAAKzB,KAAMQ,UAAU,uBAC5B,4BACG,IACD,4BAAQA,UAAU,SAASoB,QAAS,EAAKT,gBACtCM,EAAKzB,OAIV,wBAAIQ,UAAU,eAAeiB,EAAK7B,UAKpC,2BAAOiC,IAAKJ,EAAKzB,MACf,wBAAIQ,UAAU,uBACZ,4BACE,4BAAQoB,QAAS,EAAKT,gBACnB,IACAM,EAAKzB,OAIV,wBAAIQ,UAAU,iBAAiBiB,EAAK7B,eAOhD,kBAAC,EAAD,CAAWU,YAAaM,KAAKN,mB,GApFnBO,IAAMC,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.e2990e25.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nclass ItemAdder extends React.Component {\n  state = {\n    listItem: \"\",\n    dueDate: \"\",\n  };\n\n  handleUpdate = (event) => {\n    const listItem = event.target.name;\n    const value = event.target.value;\n    this.setState(() => {\n      return {\n        [listItem]: value,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.props.addListItem(this.state.listItem, this.state.dueDate);\n          this.setState({ listItem: \"\", dueDate: \"\" });\n        }}\n      >\n        <label htmlFor=\"list-item\">Add Item:</label>\n        <input\n          className=\"input-form\"\n          name=\"listItem\"\n          id=\"list-item\"\n          type=\"text\"\n          onChange={this.handleUpdate}\n          value={this.state.listItem}\n        />\n        <label htmlFor=\"due-date\">Date due:</label>\n        <input\n          className=\"input-form\"\n          name=\"dueDate\"\n          id=\"due-date\"\n          type=\"date\"\n          onChange={this.handleUpdate}\n        ></input>\n\n        <button className=\"add\">Add a task to complete</button>\n      </form>\n    );\n  }\n}\n\nexport default ItemAdder;\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport ItemAdder from \"./itemAdder\";\n\nclass App extends React.Component {\n  state = {\n    list: [],\n  };\n\n  addListItem = (listItem, dueDate) => {\n    this.setState((previousState) => {\n      return {\n        list: [\n          ...previousState.list,\n          { name: listItem, done: false, dueDate: dueDate },\n        ],\n      };\n    });\n  };\n\n  removeListItem = (event) => {\n    const selectedItem = event.target.innerText;\n    console.log(selectedItem);\n    this.setState((previousState) => {\n      return {\n        list: previousState.list.map((item) => {\n          if (item.name === selectedItem) {\n            const copyItem = { ...item };\n            copyItem.done = !copyItem.done;\n            return copyItem;\n          } else {\n            return item;\n          }\n        }),\n      };\n    });\n  };\n  clearList = () => {\n    this.setState({ list: [] });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>To Do List</h1>\n        </header>\n        <button onClick={this.clearList}>Clear List</button>\n        <table>\n          <thead>\n            <tr>\n              <th>Task</th>\n              <th>Date Due</th>\n            </tr>\n          </thead>\n\n          {this.state.list.map((item) => {\n            if (item.done === true) {\n              return (\n                <tr key={item.name} className=\"list-item-container\">\n                  <td>\n                    {\" \"}\n                    <button className=\"strike\" onClick={this.removeListItem}>\n                      {item.name}\n                    </button>\n                  </td>\n\n                  <td className=\"strike-date\">{item.dueDate}</td>\n                </tr>\n              );\n            } else {\n              return (\n                <tbody key={item.name}>\n                  <tr className=\"list-item-container\">\n                    <td>\n                      <button onClick={this.removeListItem}>\n                        {\" \"}\n                        {item.name}\n                      </button>\n                    </td>\n\n                    <td className=\"due-date-text\">{item.dueDate}</td>\n                  </tr>\n                </tbody>\n              );\n            }\n          })}\n        </table>\n        <ItemAdder addListItem={this.addListItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}